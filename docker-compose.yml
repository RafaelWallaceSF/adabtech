
version: '3.8'

services:
  # PayTrack Frontend
  frontend:
    image: ${REGISTRY_URL:-localhost}/paytrack-frontend:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`app.paytrack.local`)"
        - "traefik.http.routers.frontend.entrypoints=web"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - traefik-public
      - paytrack-network
    depends_on:
      - api
    environment:
      - VITE_API_URL=http://api:3000
      - VITE_PUBLIC_URL=http://app.paytrack.local

  # PayTrack API Server
  api:
    image: ${REGISTRY_URL:-localhost}/paytrack-api:${TAG:-latest}
    build:
      context: ./api
      dockerfile: Dockerfile
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`api.paytrack.local`)"
        - "traefik.http.routers.api.entrypoints=web"
        - "traefik.http.services.api.loadbalancer.server.port=3000"
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - traefik-public
      - paytrack-network
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@db:5432/paytrack
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - PORT=3000

  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=paytrack
    networks:
      - paytrack-network
    ports:
      - "5432:5432"

  # Redis Cache
  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      - paytrack-network
    ports:
      - "6379:6379"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      - traefik-public

  # Portainer for container management
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer.paytrack.local`)"
        - "traefik.http.routers.portainer.entrypoints=web"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      - traefik-public
    ports:
      - "9000:9000"

networks:
  traefik-public:
    driver: overlay
    attachable: true
  paytrack-network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  portainer_data:
    driver: local
